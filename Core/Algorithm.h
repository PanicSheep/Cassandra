#pragma once
#include <type_traits>
#include <functional>
#include <vector>
#include <numeric>

template <class T>
inline std::vector<T> range(T begin, T end)
{
	std::vector<T> elements(end - begin);
	std::iota(elements.begin(), elements.end(), begin);
	return elements;
}

// Assigns values, generated by given function object g,
// to the elements in the range beginning at first, until g exhaustes by returning std::null_opt.
// Does nothing otherwise.
template <class OutputIt, class Generator>
inline void generate_all(OutputIt first, Generator g) noexcept(std::is_nothrow_invocable_v<Generator>)
{
	static_assert(std::is_invocable_v<Generator>);

	for (auto opt_value = std::invoke(g); opt_value.has_value(); opt_value = std::invoke(g))
		*first++ = std::move(opt_value.value());
}
